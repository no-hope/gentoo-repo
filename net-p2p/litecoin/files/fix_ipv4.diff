--- a/src/bitcoinrpc.cpp	2013-04-16 17:34:14.620678879 +0700
+++ b/src/bitcoinrpc.cpp	2013-04-16 17:35:01.672682998 +0700
@@ -3040,24 +3040,24 @@
     try
     {
         boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(io_service));
-        acceptor->open(endpoint.protocol());
-        acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));
+        //acceptor->open(endpoint.protocol());
+        //acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));
 
         // Try making the socket dual IPv6/IPv4 (if listening on the "any" address)
-        boost::system::error_code v6_only_error;
-        acceptor->set_option(boost::asio::ip::v6_only(loopback), v6_only_error);
+        //boost::system::error_code v6_only_error;
+        //acceptor->set_option(boost::asio::ip::v6_only(loopback), v6_only_error);
 
-        acceptor->bind(endpoint);
-        acceptor->listen(socket_base::max_connections);
+        //acceptor->bind(endpoint);
+        //acceptor->listen(socket_base::max_connections);
 
-        RPCListen(acceptor, context, fUseSSL);
+        //RPCListen(acceptor, context, fUseSSL);
         // Cancel outstanding listen-requests for this acceptor when shutting down
-        StopRequests.connect(signals2::slot<void ()>(
-                    static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())
-                .track(acceptor));
+        //StopRequests.connect(signals2::slot<void ()>(
+        //            static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())
+        //        .track(acceptor));
 
         // If dual IPv6/IPv4 failed (or we're opening loopback interfaces only), open IPv4 separately
-        if (loopback || v6_only_error)
+        //if (loopback || v6_only_error)
         {
             bindAddress = loopback ? asio::ip::address_v4::loopback() : asio::ip::address_v4::any();
             endpoint.address(bindAddress);
